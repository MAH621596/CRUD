{"version":3,"sources":["logo.svg","Firebase.js","FirebaseCrud.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","FirebaseCrud","useState","aFirstName","setAFirstName","aLastName","setALastName","userData","setUserData","uFirstName","setuFirstName","uLastName","setuLastName","userId","setUserId","useEffect","database","ref","on","response","data","val","userInfo","id","push","FirstName","LastName","class","Container","Grid","Row","columns","Column","Segment","padded","Form","Field","Input","placeholder","focus","value","onChange","e","target","Button","onClick","firestore","handleAddUser","positive","Icon","name","child","update","primary","length","Header","textAlign","Table","celled","fixed","singleLine","HeaderCell","map","index","Body","Cell","handleUpdateClick","color","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a14e6692.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD_RPnU1bkBD2VBYX2xj9ppDFsEq5eFZBw\",\r\n    authDomain: \"fir-crud-f81ea.firebaseapp.com\",\r\n    databaseURL: \"https://fir-crud-f81ea-default-rtdb.firebaseio.com\",\r\n    projectId: \"fir-crud-f81ea\",\r\n    storageBucket: \"fir-crud-f81ea.appspot.com\",\r\n    messagingSenderId: \"856883388937\",\r\n    appId: \"1:856883388937:web:172573e3bb9a5ead890ed8\",\r\n    measurementId: \"G-D8KJLHDKT0\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport default firebase;","import { Button, Container, Form, Grid, Header, Icon, Input, Segment, Tab, Table } from \"semantic-ui-react\";\r\nimport firebase from \"./Firebase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n//import { Form, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\n\r\n\r\n\r\nconst FirebaseCrud = ()=> {\r\n     const [aFirstName,setAFirstName] = useState('');\r\n     const [aLastName, setALastName] = useState('');\r\n     const [userData,setUserData] = useState([]);\r\n     const [uFirstName, setuFirstName] = useState('');\r\n     const [uLastName, setuLastName] = useState('');\r\n     const [userId,setUserId] = useState('');\r\n\r\n     //Retrieval of data from DB\r\n     useEffect(()=>{\r\n         const firestore = firebase.database().ref(\"/UserInfo\");\r\n         firestore.on('value',(response)=>{\r\n             const data = response.val();\r\n             let userInfo = [];\r\n             for(let id in data){\r\n                 userInfo.push({\r\n                     id:id,\r\n                     FirstName: data[id].FirstName,\r\n                     LastName: data[id].LastName,\r\n                 });\r\n             }\r\n              setUserData(userInfo);\r\n\r\n         });\r\n\r\n     },[]);\r\n     \r\n\r\n\r\n\r\n    const handleAddUser = () => {\r\n\r\n        const firestore = firebase.database().ref(\"/UserInfo\");\r\n        let data = {\r\n            FirstName : aFirstName,\r\n            LastName : aLastName\r\n        };\r\n\r\n        firestore.push(data);\r\n        setAFirstName('');\r\n        setALastName('');\r\n\r\n    };\r\n\r\n    const handleUpdateUser = ()=>{\r\n        const firestore = firebase.database().ref('/UserInfo').child(userId);\r\n        firestore.update({\r\n            FirstName:uFirstName,\r\n            LastName:uLastName,\r\n        })\r\n        setuFirstName('');\r\n        setuLastName('');\r\n\r\n    };\r\n\r\n    const handleUpdateClick = (data)=> {\r\n        setuFirstName(data.FirstName);\r\n        setuLastName(data.LastName);\r\n        setUserId(data.id);\r\n    };\r\n\r\n    const handleDelete = (id)=> {\r\n        const firestore = firebase.database().ref('/UserInfo').child(id);\r\n        firestore.remove();\r\n\r\n    };\r\n\r\n\r\n\r\n    return <div class = \"ui hidden divider\">\r\n    <Container>\r\n        <Grid>\r\n            <Grid.Row columns = \"2\">\r\n                <Grid.Column>\r\n                    <Segment padded = \"very\">\r\n                        <Form>\r\n                            <Form.Field>\r\n                                <label>First_Name</label>\r\n                                <Input placeholder=\"First Name\" focus value = {aFirstName} onChange={(e)=>{setAFirstName(e.target.value)}}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Last_Name</label>\r\n                                <Input placeholder=\"Last Name\" focus value = {aLastName} onChange={(e)=>{setALastName(e.target.value)}} />\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <Button onClick={()=>{\r\n                                    handleAddUser();\r\n                                }}\r\n                                positive\r\n                                \r\n                                >\r\n                                 <Icon name = \"add circle\"></Icon>\r\n                                 Add User\r\n                                 </Button>\r\n                            </Form.Field>\r\n\r\n\r\n                        </Form>\r\n                    </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column><Segment padded = \"very\">\r\n                        <Form>\r\n                            <Form.Field>\r\n                                <label>First_Name</label>\r\n                                <Input placeholder=\"First Name\" focus value = {uFirstName} onChange={(e)=>{setuFirstName(e.target.value)}}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Last_Name</label>\r\n                                <Input placeholder=\"Last Name\" focus value = {uLastName} onChange={(e)=>{setuLastName(e.target.value)}} />\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <Button onClick={()=>{\r\n                                    handleUpdateUser();\r\n                                }}\r\n                                primary\r\n                                \r\n                                >\r\n                                <Icon name=\"edit\">\r\n\r\n                                </Icon>\r\n                                 Update User\r\n                                 </Button>\r\n                            </Form.Field>\r\n\r\n\r\n                        </Form>\r\n                    </Segment></Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row columns =\"1\">\r\n                <Grid.Column>\r\n                   {\r\n                       userData.length == 0? (\r\n                       <Segment padded = \"very\" >\r\n                           <Header textAlign=\"center\">\r\n                               Oops! There is no data available. Please Enter Some Data.\r\n                           </Header>\r\n                       </Segment>\r\n                       ) : (\r\n                       <Segment padded = \"very\">\r\n                           <Table celled fixed singleLine>\r\n                               <Table.Header>\r\n                                   <Table.Row>\r\n                                       <Table.HeaderCell>First_Name</Table.HeaderCell>\r\n                                       <Table.HeaderCell>Last_Name</Table.HeaderCell>\r\n                                       <Table.HeaderCell></Table.HeaderCell>\r\n                                   </Table.Row>\r\n                               </Table.Header>\r\n                               {\r\n                                   userData.map((data,index)=>{\r\n                                       return <Table.Body>\r\n                                           <Table.Cell>{data.FirstName}</Table.Cell>\r\n                                           <Table.Cell>{data.LastName}</Table.Cell>\r\n                                           <Table.Cell>\r\n                                               <Button primary onClick={()=>{handleUpdateClick(data)}}>\r\n                                                   <Icon name =\"edit\" ></Icon>\r\n                                                   Update\r\n                                               </Button>\r\n                                               <Button color = \"red\" onClick={()=>{handleDelete(data.id)}}>\r\n                                                   <Icon name = \"delete\" ></Icon>\r\n                                                   Delete\r\n                                               </Button>\r\n                                           </Table.Cell>\r\n\r\n                                       </Table.Body>\r\n                                   })\r\n                               }\r\n\r\n\r\n\r\n                           </Table>\r\n\r\n                       </Segment>)\r\n\r\n                   }\r\n\r\n                   \r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n        </Container>\r\n        </div>\r\n}\r\n\r\nexport default FirebaseCrud;","import logo from './logo.svg';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport FirebaseCrud from './FirebaseCrud';\nimport firebase from 'firebase';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  return (\n    \n    <Container>\n      <FirebaseCrud></FirebaseCrud>\n\n\n    </Container>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import 'semantic-ui-css/semantic.js';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}